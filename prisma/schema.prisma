generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AcademicSemester {
  id         String    @id @default(uuid())
  year       Int
  code       String
  title      String
  startMonth String
  endMonth   String
  createdAt  DateTime  @default(now())
  updatedAd  DateTime  @updatedAt
  students   Student[]

  @@map("academic_semesters")
}

model AcademicFaculty {
  id                   String               @id @default(uuid())
  title                String
  createdAt            DateTime             @default(now())
  updatedAd            DateTime             @updatedAt
  academic_departments AcademicDepartment[]
  faculties            Faculty[]
  students             Student[]

  @@map("academic_faculties")
}

model AcademicDepartment {
  id                String          @id @default(uuid())
  title             String
  createdAt         DateTime        @default(now())
  updatedAd         DateTime        @updatedAt
  academicFacultyId String
  academicFaculty   AcademicFaculty @relation(fields: [academicFacultyId], references: [id])
  faculties         Faculty[]
  students          Student[]

  @@map("academic_departments")
}

model Student {
  id                   String             @id @default(uuid())
  studentId            String
  firstName            String
  lastName             String
  middleName           String
  profileImage         String?
  email                String             @unique
  contactNo            String             @unique
  gender               String
  bloodGroup           String
  createdAt            DateTime           @default(now())
  updatedAd            DateTime           @updatedAt
  academicSemesterId   String
  academicDepartmentId String
  academicFacultyId    String
  academicDepartment   AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])
  academicFaculty      AcademicFaculty    @relation(fields: [academicFacultyId], references: [id])
  academicSemester     AcademicSemester   @relation(fields: [academicSemesterId], references: [id])

  @@map("students")
}

model Faculty {
  id                   String             @id @default(uuid())
  facultyId            String
  firstName            String
  lastName             String
  middleName           String
  profileImage         String?
  email                String             @unique
  contactNo            String             @unique
  gender               String
  bloodGroup           String
  designation          String
  createdAt            DateTime           @default(now())
  updatedAd            DateTime           @updatedAt
  academicDepartmentId String
  academicFacultyId    String
  academicDepartment   AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])
  academicFaculty      AcademicFaculty    @relation(fields: [academicFacultyId], references: [id])

  @@map("faculties")
}

model Building {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rooms      Room[]
}

model Room {
  id         String   @id @default(uuid())
  title      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  buildingId String
  building   Building @relation(fields: [buildingId], references: [id])
}
